
Dio_LayeredArchitecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cee  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c7  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064e  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b0  00000000  00000000  00002526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  7a:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_ReadChannel>:
	STD_LevelType ret=STD_LOW;
	//which port?
	Dio_PortType portx=ChannelId/8;
	
	//position inside port?
	Dio_ChannelType pos=ChannelId % 8;
  82:	28 2f       	mov	r18, r24
  84:	27 70       	andi	r18, 0x07	; 7
	switch (portx)
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	79 f0       	breq	.+30     	; 0xae <Dio_ReadChannel+0x2c>
  90:	28 f0       	brcs	.+10     	; 0x9c <Dio_ReadChannel+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	a9 f0       	breq	.+42     	; 0xc0 <Dio_ReadChannel+0x3e>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	e1 f0       	breq	.+56     	; 0xd2 <Dio_ReadChannel+0x50>
  9a:	24 c0       	rjmp	.+72     	; 0xe4 <Dio_ReadChannel+0x62>
	{
		case Dio_PortA:
				ret= GET_BIT(PINA_REG,pos);
  9c:	89 b3       	in	r24, 0x19	; 25
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <Dio_ReadChannel+0x24>
  a2:	95 95       	asr	r25
  a4:	87 95       	ror	r24
  a6:	2a 95       	dec	r18
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <Dio_ReadChannel+0x20>
  aa:	81 70       	andi	r24, 0x01	; 1
				break;
  ac:	08 95       	ret
	    case Dio_PortB:
				ret= GET_BIT(PINB_REG,pos);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_ReadChannel+0x36>
  b4:	95 95       	asr	r25
  b6:	87 95       	ror	r24
  b8:	2a 95       	dec	r18
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_ReadChannel+0x32>
  bc:	81 70       	andi	r24, 0x01	; 1
				break;
  be:	08 95       	ret
		case Dio_PortC:
				ret= GET_BIT(PINC_REG,pos);
  c0:	83 b3       	in	r24, 0x13	; 19
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <Dio_ReadChannel+0x48>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	2a 95       	dec	r18
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Dio_ReadChannel+0x44>
  ce:	81 70       	andi	r24, 0x01	; 1
				break;
  d0:	08 95       	ret
		case Dio_PortD:
				ret= GET_BIT(PIND_REG,pos);
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Dio_ReadChannel+0x5a>
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	2a 95       	dec	r18
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Dio_ReadChannel+0x56>
  e0:	81 70       	andi	r24, 0x01	; 1
				break;	
  e2:	08 95       	ret
#include "bit_math.h"


STD_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId){
	
	STD_LevelType ret=STD_LOW;
  e4:	80 e0       	ldi	r24, 0x00	; 0
		default:
		    break;		
				
	}
	return ret;
}
  e6:	08 95       	ret

000000e8 <Dio_WriteChannel>:
	//port of the channel? 4 ports 0 ~ 3 
	
	 Dio_PortType portx=channelId/8; // 1/8=0 , 0~ 3
	 
	 //position of the channel inside the port 0~7
	 Dio_ChannelType pos= channelId % 8; //7
  e8:	98 2f       	mov	r25, r24
  ea:	97 70       	andi	r25, 0x07	; 7
	 
	 switch(portx){
  ec:	86 95       	lsr	r24
  ee:	86 95       	lsr	r24
  f0:	86 95       	lsr	r24
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	21 f1       	breq	.+72     	; 0x13e <Dio_WriteChannel+0x56>
  f6:	30 f0       	brcs	.+12     	; 0x104 <Dio_WriteChannel+0x1c>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	f1 f1       	breq	.+124    	; 0x178 <Dio_WriteChannel+0x90>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	09 f4       	brne	.+2      	; 0x102 <Dio_WriteChannel+0x1a>
 100:	58 c0       	rjmp	.+176    	; 0x1b2 <Dio_WriteChannel+0xca>
 102:	08 95       	ret
		 case Dio_PortA:
			
					if (Level==STD_HIGH)
 104:	61 30       	cpi	r22, 0x01	; 1
 106:	69 f4       	brne	.+26     	; 0x122 <Dio_WriteChannel+0x3a>
					{
						SET_BIT(PORTA_REG,pos); // PORTA_REG |=(1<<1)
 108:	4b b3       	in	r20, 0x1b	; 27
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <Dio_WriteChannel+0x2e>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <Dio_WriteChannel+0x2a>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	08 95       	ret
					}
					else{
						CLEAR_BIT(PORTA_REG,pos);
 122:	4b b3       	in	r20, 0x1b	; 27
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Dio_WriteChannel+0x48>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	9a 95       	dec	r25
 132:	e2 f7       	brpl	.-8      	; 0x12c <Dio_WriteChannel+0x44>
 134:	cb 01       	movw	r24, r22
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	8b bb       	out	0x1b, r24	; 27
 13c:	08 95       	ret
					}
					break;
					
		 case Dio_PortB:
		 	if (Level==STD_HIGH)
 13e:	61 30       	cpi	r22, 0x01	; 1
 140:	69 f4       	brne	.+26     	; 0x15c <Dio_WriteChannel+0x74>
		 	{
			 	SET_BIT(PORTB_REG,pos); // PORTA_REG |=(1<<pos)
 142:	48 b3       	in	r20, 0x18	; 24
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Dio_WriteChannel+0x68>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	9a 95       	dec	r25
 152:	e2 f7       	brpl	.-8      	; 0x14c <Dio_WriteChannel+0x64>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	88 bb       	out	0x18, r24	; 24
 15a:	08 95       	ret
		 	}
		 	else{
			 	CLEAR_BIT(PORTB_REG,pos);
 15c:	48 b3       	in	r20, 0x18	; 24
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <Dio_WriteChannel+0x82>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	9a 95       	dec	r25
 16c:	e2 f7       	brpl	.-8      	; 0x166 <Dio_WriteChannel+0x7e>
 16e:	cb 01       	movw	r24, r22
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	88 bb       	out	0x18, r24	; 24
 176:	08 95       	ret
		 	}
		 	break;
		 case Dio_PortC:
			 if (Level==STD_HIGH)
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	69 f4       	brne	.+26     	; 0x196 <Dio_WriteChannel+0xae>
			 {
				 SET_BIT(PORTC_REG,pos); // PORTA_REG |=(1<<pos)
 17c:	45 b3       	in	r20, 0x15	; 21
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <Dio_WriteChannel+0xa2>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	9a 95       	dec	r25
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Dio_WriteChannel+0x9e>
 18e:	cb 01       	movw	r24, r22
 190:	84 2b       	or	r24, r20
 192:	85 bb       	out	0x15, r24	; 21
 194:	08 95       	ret
			 }
			else{
				 CLEAR_BIT(PORTC_REG,pos);
 196:	45 b3       	in	r20, 0x15	; 21
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Dio_WriteChannel+0xbc>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	9a 95       	dec	r25
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <Dio_WriteChannel+0xb8>
 1a8:	cb 01       	movw	r24, r22
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	08 95       	ret
			 }
			break;
		 case Dio_PortD:
			if (Level==STD_HIGH)
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	69 f4       	brne	.+26     	; 0x1d0 <Dio_WriteChannel+0xe8>
			{
				 SET_BIT(PORTD_REG,pos); // PORTA_REG |=(1<<pos)
 1b6:	42 b3       	in	r20, 0x12	; 18
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_WriteChannel+0xdc>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	9a 95       	dec	r25
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_WriteChannel+0xd8>
 1c8:	cb 01       	movw	r24, r22
 1ca:	84 2b       	or	r24, r20
 1cc:	82 bb       	out	0x12, r24	; 18
 1ce:	08 95       	ret
			}
			else{
				 CLEAR_BIT(PORTD_REG,pos);
 1d0:	42 b3       	in	r20, 0x12	; 18
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_WriteChannel+0xf6>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	9a 95       	dec	r25
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_WriteChannel+0xf2>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	08 95       	ret

000001ec <Dio_WritePort>:
	
}

void Dio_WritePort(Dio_PortType port,uint8 value){
	
	switch(port){
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	41 f0       	breq	.+16     	; 0x200 <Dio_WritePort+0x14>
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <Dio_WritePort+0x10>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	39 f0       	breq	.+14     	; 0x204 <Dio_WritePort+0x18>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	39 f0       	breq	.+14     	; 0x208 <Dio_WritePort+0x1c>
 1fa:	08 95       	ret
		case Dio_PortA:
				PORTA_REG=value;
 1fc:	6b bb       	out	0x1b, r22	; 27
				break;
 1fe:	08 95       	ret
		case Dio_PortB:
				PORTB_REG=value;
 200:	68 bb       	out	0x18, r22	; 24
				break;
 202:	08 95       	ret
		case Dio_PortC:
				PORTC_REG=value;
 204:	65 bb       	out	0x15, r22	; 21
				break;
 206:	08 95       	ret
		case Dio_PortD:
			PORTD_REG=value;
 208:	62 bb       	out	0x12, r22	; 18
 20a:	08 95       	ret

0000020c <Dio_Init>:
/*PD7*/	{Output,STD_LOW}
	
	
};

void Dio_Init(){
 20c:	e0 e6       	ldi	r30, 0x60	; 96
 20e:	f0 e0       	ldi	r31, 0x00	; 0
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
 210:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_PortA:
					CLEAR_BIT(DDRA_REG,pos);
					break;
				case Dio_PortB:
					CLEAR_BIT(DDRB_REG,pos);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
void Dio_Init(){
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
		Dio_PortType portx=counter/8;
 216:	98 2f       	mov	r25, r24
 218:	96 95       	lsr	r25
 21a:	96 95       	lsr	r25
 21c:	96 95       	lsr	r25
		Dio_ChannelType pos=counter % 8;
 21e:	38 2f       	mov	r19, r24
 220:	37 70       	andi	r19, 0x07	; 7
		if (pin_cfg[counter].pinDirection==Output)
 222:	20 81       	ld	r18, Z
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	a1 f5       	brne	.+104    	; 0x290 <Dio_Init+0x84>
		{
			switch (portx)
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	89 f0       	breq	.+34     	; 0x24e <Dio_Init+0x42>
 22c:	28 f0       	brcs	.+10     	; 0x238 <Dio_Init+0x2c>
 22e:	92 30       	cpi	r25, 0x02	; 2
 230:	c9 f0       	breq	.+50     	; 0x264 <Dio_Init+0x58>
 232:	93 30       	cpi	r25, 0x03	; 3
 234:	11 f1       	breq	.+68     	; 0x27a <Dio_Init+0x6e>
 236:	63 c0       	rjmp	.+198    	; 0x2fe <Dio_Init+0xf2>
			{
				case Dio_PortA:
						SET_BIT(DDRA_REG,pos);
 238:	9a b3       	in	r25, 0x1a	; 26
 23a:	ba 01       	movw	r22, r20
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Dio_Init+0x36>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	3a 95       	dec	r19
 244:	e2 f7       	brpl	.-8      	; 0x23e <Dio_Init+0x32>
 246:	9b 01       	movw	r18, r22
 248:	29 2b       	or	r18, r25
 24a:	2a bb       	out	0x1a, r18	; 26
						break;
 24c:	58 c0       	rjmp	.+176    	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortB:
						SET_BIT(DDRB_REG,pos);
 24e:	97 b3       	in	r25, 0x17	; 23
 250:	ba 01       	movw	r22, r20
 252:	02 c0       	rjmp	.+4      	; 0x258 <Dio_Init+0x4c>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	3a 95       	dec	r19
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Dio_Init+0x48>
 25c:	9b 01       	movw	r18, r22
 25e:	29 2b       	or	r18, r25
 260:	27 bb       	out	0x17, r18	; 23
						break;
 262:	4d c0       	rjmp	.+154    	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortC:
						SET_BIT(DDRC_REG,pos);
 264:	94 b3       	in	r25, 0x14	; 20
 266:	ba 01       	movw	r22, r20
 268:	02 c0       	rjmp	.+4      	; 0x26e <Dio_Init+0x62>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	3a 95       	dec	r19
 270:	e2 f7       	brpl	.-8      	; 0x26a <Dio_Init+0x5e>
 272:	9b 01       	movw	r18, r22
 274:	29 2b       	or	r18, r25
 276:	24 bb       	out	0x14, r18	; 20
						break;
 278:	42 c0       	rjmp	.+132    	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortD:
						SET_BIT(DDRD_REG,pos);
 27a:	91 b3       	in	r25, 0x11	; 17
 27c:	ba 01       	movw	r22, r20
 27e:	02 c0       	rjmp	.+4      	; 0x284 <Dio_Init+0x78>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	3a 95       	dec	r19
 286:	e2 f7       	brpl	.-8      	; 0x280 <Dio_Init+0x74>
 288:	9b 01       	movw	r18, r22
 28a:	29 2b       	or	r18, r25
 28c:	21 bb       	out	0x11, r18	; 17
						break;
 28e:	37 c0       	rjmp	.+110    	; 0x2fe <Dio_Init+0xf2>
			}//switch
		}//if
		else{
			switch (portx)
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <Dio_Init+0xac>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <Dio_Init+0x94>
 296:	92 30       	cpi	r25, 0x02	; 2
 298:	d9 f0       	breq	.+54     	; 0x2d0 <Dio_Init+0xc4>
 29a:	93 30       	cpi	r25, 0x03	; 3
 29c:	29 f1       	breq	.+74     	; 0x2e8 <Dio_Init+0xdc>
 29e:	2f c0       	rjmp	.+94     	; 0x2fe <Dio_Init+0xf2>
			{
				case Dio_PortA:
					CLEAR_BIT(DDRA_REG,pos);
 2a0:	2a b3       	in	r18, 0x1a	; 26
 2a2:	ba 01       	movw	r22, r20
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Dio_Init+0x9e>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	3a 95       	dec	r19
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <Dio_Init+0x9a>
 2ae:	96 2f       	mov	r25, r22
 2b0:	90 95       	com	r25
 2b2:	92 23       	and	r25, r18
 2b4:	9a bb       	out	0x1a, r25	; 26
					break;
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortB:
					CLEAR_BIT(DDRB_REG,pos);
 2b8:	27 b3       	in	r18, 0x17	; 23
 2ba:	ba 01       	movw	r22, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Dio_Init+0xb6>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	3a 95       	dec	r19
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <Dio_Init+0xb2>
 2c6:	96 2f       	mov	r25, r22
 2c8:	90 95       	com	r25
 2ca:	92 23       	and	r25, r18
 2cc:	97 bb       	out	0x17, r25	; 23
					break;
 2ce:	17 c0       	rjmp	.+46     	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortC:
					CLEAR_BIT(DDRC_REG,pos);
 2d0:	24 b3       	in	r18, 0x14	; 20
 2d2:	ba 01       	movw	r22, r20
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Dio_Init+0xce>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	3a 95       	dec	r19
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Dio_Init+0xca>
 2de:	96 2f       	mov	r25, r22
 2e0:	90 95       	com	r25
 2e2:	92 23       	and	r25, r18
 2e4:	94 bb       	out	0x14, r25	; 20
					break;
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <Dio_Init+0xf2>
				case Dio_PortD:
					CLEAR_BIT(DDRD_REG,pos);
 2e8:	21 b3       	in	r18, 0x11	; 17
 2ea:	ba 01       	movw	r22, r20
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Dio_Init+0xe6>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	3a 95       	dec	r19
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Dio_Init+0xe2>
 2f6:	96 2f       	mov	r25, r22
 2f8:	90 95       	com	r25
 2fa:	92 23       	and	r25, r18
 2fc:	91 bb       	out	0x11, r25	; 17

void Dio_Init(){
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	32 96       	adiw	r30, 0x02	; 2
 302:	80 32       	cpi	r24, 0x20	; 32
 304:	09 f0       	breq	.+2      	; 0x308 <Dio_Init+0xfc>
 306:	87 cf       	rjmp	.-242    	; 0x216 <Dio_Init+0xa>
			}
		}
		
}//for loop
	
 308:	08 95       	ret

0000030a <main>:
#include "dio_cfg.h"
#include "STD_Types.h"

int main(void)
{
  Dio_Init();
 30a:	0e 94 06 01 	call	0x20c	; 0x20c <Dio_Init>
  Dio_WriteChannel(Dio_Channel_A0,STD_HIGH);//activate pull-up
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 74 00 	call	0xe8	; 0xe8 <Dio_WriteChannel>
    while (1) 
    {
		if(Dio_ReadChannel(Dio_Channel_A0)==STD_LOW){
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 41 00 	call	0x82	; 0x82 <Dio_ReadChannel>
 31c:	81 11       	cpse	r24, r1
 31e:	17 c0       	rjmp	.+46     	; 0x34e <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	86 e7       	ldi	r24, 0x76	; 118
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x1c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x26>
 330:	00 00       	nop
			_delay_ms(30);
			Dio_WritePort(Dio_PortD,0xFF);
 332:	6f ef       	ldi	r22, 0xFF	; 255
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Dio_WritePort>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	81 ee       	ldi	r24, 0xE1	; 225
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x36>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x40>
 34a:	00 00       	nop
 34c:	e4 cf       	rjmp	.-56     	; 0x316 <main+0xc>
			//Dio_WriteChannel(Dio_Channel_D3,STD_HIGH);
			_delay_ms(100);
		}
		else{
		    Dio_WritePort(Dio_PortD,0x00);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Dio_WritePort>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	81 ee       	ldi	r24, 0xE1	; 225
 35a:	94 e0       	ldi	r25, 0x04	; 4
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x52>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x5c>
 366:	00 00       	nop
 368:	d6 cf       	rjmp	.-84     	; 0x316 <main+0xc>

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
